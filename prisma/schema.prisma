// ================= GENERATOR & DATASOURCE =================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================= MODELS & ENUMS (FULL HYBRID) =================

// ---------------- RBAC: Enums ----------------
enum Role {
  ADMIN
  SUPPLIER
  INSTRUCTOR
  USER
}

enum Permission {
  VIEW_DASHBOARD
  MANAGE_ORDERS
  MANAGE_PRODUCTS
  MANAGE_COURSES
  MANAGE_USERS
}

// ---------------- RBAC: Models ----------------
model UserRole {
  id          Int                @id @default(autoincrement())
  name        Role               @unique
  description String?
  users       User[]
  permissions UserRolePermission[]
}

model UserPermission {
  id          Int                @id @default(autoincrement())
  name        Permission         @unique
  description String?
  roles       UserRolePermission[]

  // ABAC: per-user assignments (new)
  assignments UserPermissionAssignment[]
}

model UserRolePermission {
  roleId       Int
  permissionId Int
  role         UserRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   UserPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

/// ---------------- ABAC: per-user permission assignment ---------------
/// This join table allows granting (or later revoking) individual users
/// specific permissions without changing their role. Use when you want
/// temporary or fine-grained overrides.
model UserPermissionAssignment {
  userId       Int
  permissionId Int
  conditions   Json? 
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   UserPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([userId, permissionId])
  @@index([permissionId])
}

// ================= EXISTING MODELS =================

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  roleId    Int?
  role      UserRole? @relation(fields: [roleId], references: [id], onDelete: SetNull)
  isBuyer   Boolean   @default(false)
  isStudent Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  assignmentSubmissions AssignmentSubmission[]
  carts                 Cart[]
  courseEnrollments     CourseEnrollment[]
  lessonProgresses      LessonProgress[]
  payments              Payment[]
  products              Product[]
  productOrders         ProductOrder[]
  productReviews        ProductReview[]
  courseReviews         CourseReview[]
  instructor            Instructor?
  refreshTokens         RefreshToken[]   // ðŸ‘ˆ Relasi ke RefreshToken

  // ABAC: user-specific permission assignments
  permissionAssignments UserPermissionAssignment[]

  @@index([email])
  @@index([roleId])
  @@index([deletedAt])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   // hashed token, jangan simpan plain
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  device    String?  // contoh: "Chrome on Windows"
  ipAddress String?  // opsional, untuk keamanan
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?

  @@index([userId])
  @@index([token])
}


model Instructor {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  bio           String?
  profileImage  String?
  expertise     String[] // Array of expertise areas
  experience    String? // Years of experience
  socialLinks   Json? // Social media links as JSON
  isVerified    Boolean  @default(false)
  rating        Decimal  @default(0) @db.Decimal(2, 1)
  totalStudents Int      @default(0)
  totalCourses  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[]

  // Performance Indexes
  @@index([isVerified, rating])  // Verified instructor listings
  @@index([totalStudents])       // Popular instructors
}

model Product {
  id          Int             @id @default(autoincrement())
  slug        String          @unique
  name        String
  description String?
  price       Decimal         @db.Decimal(12, 2)
  stock       Int             @default(0)
  images      String[] // Multiple images (Postgres text[])
  category    ProductCategory
  status      ProductStatus
  supplierId  Int
  rating      Decimal         @default(0) @db.Decimal(2, 1)
  reviewCount Int             @default(0)
  origin      ProductOrigin
  weight      String?
  tags        ProductTag[] // enum array
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?

  // Relations
  supplier   User               @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems ProductOrderItem[]
  reviews    ProductReview[]

  // Performance Indexes
  @@index([slug])
  @@index([name])
  @@index([description])
  @@index([category, status])        // E-commerce filtering
  @@index([rating, reviewCount])     // Popular products
  @@index([supplierId, status])      // Supplier products
  @@index([deletedAt])               // Soft delete filtering
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int      @db.SmallInt // 1-5 rating
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([productId, rating])       // Product reviews sorted by rating
  @@index([userId, createdAt])       // User review history
  @@unique([productId, userId])      // One review per user per product
}

model Course {
  id               Int            @id @default(autoincrement())
  title            String
  slug             String         @unique
  description      String?
  shortDescription String? // Brief description for cards
  syllabus         String?
  price            Decimal        @db.Decimal(12, 2)
  instructorId     Int
  rating           Decimal        @default(0) @db.Decimal(2, 1)
  reviewCount      Int            @default(0)
  students         Int            @default(0)
  level            CourseLevel
  category         CourseCategory
  language         String         @default("id")
  subtitles        String[]       @default([])

  // Udemy-style fields
  thumbnail        String?
  previewVideo     String?
  whatYouWillLearn String[] @default([])
  requirements     String[] @default([])
  targetAudience   String[] @default([])
  totalDuration    Int? // Total minutes (calculated)
  totalLessons     Int? // Total lessons (calculated)
  certificate      Boolean  @default(false)

  // Status and metadata
  status      CourseStatus @default(DRAFT)
  isPublished Boolean      @default(false)
  maxStudents Int? // Enrollment limit
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  // Relations
  instructor  Instructor         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  enrollments CourseEnrollment[]
  modules     CourseModule[]
  reviews     CourseReview[]

  // Performance Indexes
  @@index([slug])
  @@index([title])
  @@index([shortDescription])
  @@index([category, level, status])     // Course filtering
  @@index([rating, students])            // Popular courses
  @@index([instructorId, isPublished])   // Instructor courses
  @@index([isPublished, createdAt])      // Recent published courses
  @@index([deletedAt])                   // Soft delete filtering
}

model CourseReview {
  id        Int      @id @default(autoincrement())
  courseId  Int
  userId    Int
  rating    Int      @db.SmallInt // 1-5 rating
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([courseId, rating])        // Course reviews sorted by rating
  @@index([userId, createdAt])       // User review history
  @@unique([courseId, userId])       // One review per user per course
}

model CourseModule {
  id          Int       @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  orderNumber Int
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  // Performance Indexes
  @@index([courseId, orderNumber])   // Module ordering
  @@index([courseId, isPublished])   // Published modules
}

model Lesson {
  id            Int        @id @default(autoincrement())
  moduleId      Int
  slug          String     @unique
  title         String
  description   String?
  duration      Int? // Duration in minutes
  type          LessonType @default(VIDEO)
  videoUrl      String?
  content       String? // Text content for articles
  quizQuestions Json?
  passingScore  Decimal    @default(70) @db.Decimal(5, 2)
  orderNumber   Int
  isPreview     Boolean    @default(false) // Free preview lesson
  isPublished   Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?

  // Relations
  module      CourseModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  progresses  LessonProgress[]

  // Performance Indexes
  @@index([slug])
  @@index([moduleId, orderNumber])   // Lesson ordering
  @@index([moduleId, isPublished])   // Published lessons
  @@index([isPreview])               // Free preview lessons
}

model LessonProgress {
  lessonId    Int
  userId      Int
  completed   Boolean   @default(false)
  timeSpent   Int?      @default(0) // Minutes spent
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([userId, completed])           // User progress dashboard
  @@index([lessonId, completed])         // Lesson completion stats
  @@index([userId, completed, createdAt]) // Progress timeline
  @@id([lessonId, userId])
}

model Assignment {
  id           Int       @id @default(autoincrement())
  lessonId     Int
  title        String
  instructions String
  dueDate      DateTime?
  maxScore     Decimal?  @db.Decimal(5, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  lesson      Lesson                 @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  // Performance Indexes
  @@index([lessonId])                // Lesson assignments
  @@index([dueDate])                 // Upcoming assignments
}

model AssignmentSubmission {
  id           Int       @id @default(autoincrement())
  assignmentId Int
  userId       Int
  content      String?
  attachments  String[]  @default([]) // File URLs
  grade        Decimal?  @db.Decimal(5, 2)
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([assignmentId, userId])    // Assignment submissions
  @@index([userId, submittedAt])     // User submission history
  @@index([assignmentId, grade])     // Grading overview
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique // One cart per user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    CartItem[]
  payments Payment[]

  // Performance Indexes - userId is already indexed due to @unique
}

model CartItem {
  id       Int          @id @default(autoincrement())
  cartId   Int
  itemType CartItemType

  // Polymorphic relations - only one should be set
  productId Int?
  courseId  Int?

  quantity      Int       @default(1)
  priceSnapshot Decimal   @db.Decimal(12, 2) // Price at time of adding to cart
  addedAt       DateTime  @default(now())
  deletedAt     DateTime?

  // Relations
  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  course  Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([cartId, deletedAt])       // Active cart items
  @@index([productId])               // Product cart analytics
  @@index([courseId])                // Course cart analytics

  // NOTE:
  // Prisma does not support @@check. Enforce these rules in service layer
  // or add DB CHECK constraints manually in a migration:
  // 1) exactly one of productId/courseId must be non-null
  // 2) quantity must equal 1 for course items
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  cartId        Int
  amount        Decimal       @db.Decimal(12, 2)
  paymentMethod String
  status        PaymentStatus @default(PENDING)
  transactionId String? // External payment provider ID
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart              Cart               @relation(fields: [cartId], references: [id], onDelete: Cascade)
  courseEnrollments CourseEnrollment[]
  productOrders     ProductOrder[]

  // Performance Indexes
  @@index([userId, status, createdAt])   // Payment history with status
  @@index([status, paidAt])              // Admin payment reports
  @@index([transactionId])               // External payment lookup
}

model ProductOrder {
  id         Int         @id @default(autoincrement())
  buyerId    Int
  paymentId  Int
  totalPrice Decimal     @db.Decimal(12, 2)
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  // Relations
  buyer   User               @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  payment Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  items   ProductOrderItem[]

  // Performance Indexes
  @@index([buyerId, status])             // User order history
  @@index([status, createdAt])           // Admin order management
  @@index([paymentId])                   // Payment-order lookup
}

model ProductOrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  priceEach Decimal @db.Decimal(12, 2)

  // Relations
  order   ProductOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([orderId])                     // Order items
  @@index([productId])                   // Product sales analytics
}

model CourseEnrollment {
  id                 Int       @id @default(autoincrement())
  courseId           Int
  studentId          Int
  paymentId          Int
  pricePaid          Decimal   @db.Decimal(12, 2)
  progress           Int       @default(0) // Percentage 0-100
  certificateAwarded Boolean   @default(false)
  enrolledAt         DateTime  @default(now())
  completedAt        DateTime?
  lastAccessedAt     DateTime?

  // Relations
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student     User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payment     Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  certificate Certificate?

  // Performance Indexes
  @@index([studentId, enrolledAt])       // "My Courses" sorted by date
  @@index([courseId, progress])          // Course completion statistics
  @@index([studentId, progress])         // Student progress overview
  @@index([certificateAwarded])          // Certificate eligible students
  @@unique([courseId, studentId])        // One enrollment per student per course
}

model Certificate {
  id                        Int       @id @default(autoincrement())
  enrollmentId              Int       @unique
  certificateNumber         String    @unique
  finalLessonsCompleted     Boolean   @default(false)
  finalAssignmentsCompleted Boolean   @default(false)
  eligible                  Boolean   @default(false)
  issuedAt                  DateTime?
  certificateUrl            String?

  // Relations
  enrollment CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([certificateNumber])          // Certificate verification
  @@index([eligible, issuedAt])         // Certificate generation queue
}

// ==================== ENUMS ====================

enum ProductCategory {
  COFFEE
  TEA
  HERBAL
  EQUIPMENT
}

enum ProductOrigin {
  INDONESIA
  VIETNAM
  BRAZIL
  ETHIOPIA
  COLOMBIA
  GUATEMALA
  KENYA
  OTHER
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DRAFT
  DISCONTINUED
}

enum ProductTag {
  ARABICA
  ROBUSTA
  GREEN_TEA
  BLACK_TEA
  WHITE_TEA
  HERBAL
  EQUIPMENT
  ORGANIC
  FAIR_TRADE
  SINGLE_ORIGIN
}

enum CourseCategory {
  COFFEE_BREWING
  COFFEE_ROASTING
  COFFEE_BUSINESS
  TEA_BREWING
  TEA_CEREMONY
  TEA_CULTURE
  HERBAL_PREPARATION
  HERBAL_MEDICINE
  HERBAL_GARDENING
  EQUIPMENT_USAGE
  BARISTA_SKILLS
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CourseStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum CartItemType {
  PRODUCT
  COURSE
}

enum LessonType {
  VIDEO
  ARTICLE
  QUIZ
  ASSIGNMENT
  LIVE_SESSION
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}
