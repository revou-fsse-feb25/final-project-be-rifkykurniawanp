// ================= GENERATOR & DATASOURCE =================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================= ENUMS =================
enum RoleName {
  ADMIN
  SUPPLIER
  INSTRUCTOR
  USER
}

enum ProductCategory {
  COFFEE
  TEA
  HERBAL
  EQUIPMENT
}

enum CourseCategory {
  COFFEE_BREWING
  TEA_TASTING
  HERBAL_HEALTH
}

// ================= USERS & ROLES =================
model Role {
  id          Int       @id @default(autoincrement())
  name        RoleName  @unique
  description String?
  createdAt   DateTime  @default(now())
  users       User[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  firstName  String?
  lastName   String?
  phone      String?
  address    String?
  roleId     Int
  isBuyer    Boolean   @default(false)
  isStudent  Boolean   @default(false)
  createdAt  DateTime  @default(now())

  role       Role      @relation(fields: [roleId], references: [id])

  // Relations
  products           Product[]           @relation("SupplierProducts")
  reviews            ProductReview[]
  courses            Course[]            @relation("InstructorCourses")
  lessonProgress     LessonProgress[]
  carts              Cart[]
  payments           Payment[]
  productOrders      ProductOrder[]      @relation("BuyerOrders")
  courseEnrollments  CourseEnrollment[]
  submissions        AssignmentSubmission[]
}

// ================= PRODUCT SYSTEM =================
model Product {
  id           Int              @id @default(autoincrement())
  slug         String           @unique
  name         String
  description  String?
  price        Decimal          @db.Decimal(12, 2)
  stock        Int              @default(0)
  image        String?
  category     ProductCategory?
  supplierId   Int
  rating       Decimal          @default(0) @db.Decimal(2, 1)
  reviewCount  Int              @default(0)
  origin       String?
  weight       String?
  createdAt    DateTime         @default(now())

  supplier     User             @relation("SupplierProducts", fields: [supplierId], references: [id])
  tags         ProductTag[]
  reviews      ProductReview[]
  orderItems   ProductOrderItem[]
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  productId Int
  tag       String

  product   Product @relation(fields: [productId], references: [id])
}

model ProductReview {
  id        Int     @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

// ================= COURSE SYSTEM =================
model Course {
  id           Int             @id @default(autoincrement())
  title        String
  slug         String          @unique
  description  String?
  price        Decimal         @db.Decimal(12, 2)
  instructorId Int
  rating       Decimal         @default(0) @db.Decimal(2, 1)
  students     Int             @default(0)
  duration     String?
  level        String?
  category     CourseCategory?
  language     String          @default("id")
  certificate  Boolean         @default(false)
  createdAt    DateTime        @default(now())

  instructor   User            @relation("InstructorCourses", fields: [instructorId], references: [id])
  details      CourseDetail[]
  modules      CourseModule[]
  enrollments  CourseEnrollment[]
}

model CourseDetail {
  id       Int    @id @default(autoincrement())
  courseId Int
  type     String
  content  String

  course   Course @relation(fields: [courseId], references: [id])
}

model CourseModule {
  id          Int      @id @default(autoincrement())
  courseId    Int
  title       String
  orderNumber Int

  course      Course   @relation(fields: [courseId], references: [id])
  lessons     Lesson[]
}

model Lesson {
  id           Int      @id @default(autoincrement())
  moduleId     Int
  slug         String?  @unique
  title        String
  description  String?
  duration     String?
  type         String   @default("video")
  videoUrl     String?
  content      String?
  quizQuestions Json?
  passingScore Decimal  @default(70) @db.Decimal(5, 2)
  orderNumber  Int
  createdAt    DateTime @default(now())

  module       CourseModule  @relation(fields: [moduleId], references: [id])
  progresses   LessonProgress[]
  assignments  Assignment[]
}

model LessonProgress {
  id        Int      @id @default(autoincrement())
  lessonId  Int
  userId    Int
  completed Boolean  @default(false)
  updatedAt DateTime @default(now())

  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// ================= ASSESSMENTS =================
model Assignment {
  id           Int       @id @default(autoincrement())
  lessonId     Int
  title        String
  instructions String
  dueDate      DateTime?
  createdAt    DateTime  @default(now())

  lesson       Lesson    @relation(fields: [lessonId], references: [id])
  submissions  AssignmentSubmission[]
}

model AssignmentSubmission {
  id           Int      @id @default(autoincrement())
  assignmentId Int
  userId       Int
  content      String?
  grade        Decimal? @db.Decimal(5, 2)
  submittedAt  DateTime @default(now())

  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

// ================= SHOPPING CART =================
model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int
  status    String    @default("active")
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]

  Payment Payment[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  itemType  String
  itemId    Int
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(12, 2)

  cart      Cart     @relation(fields: [cartId], references: [id])
}

// ================= PAYMENT SYSTEM =================
model Payment {
  id              Int               @id @default(autoincrement())
  userId          Int
  cartId          Int
  amount          Decimal           @db.Decimal(12, 2)
  paymentMethod   String
  status          String            @default("pending")
  payableType     String
  payableId       Int
  paidAt          DateTime?
  createdAt       DateTime          @default(now())

  user            User              @relation(fields: [userId], references: [id])
  cart            Cart              @relation(fields: [cartId], references: [id])
  productOrders   ProductOrder[]
  courseEnrollments CourseEnrollment[]
}

// ================= ORDER MANAGEMENT =================
model ProductOrder {
  id         Int               @id @default(autoincrement())
  buyerId    Int
  paymentId  Int
  totalPrice Decimal           @db.Decimal(12, 2)
  status     String            @default("pending")
  createdAt  DateTime          @default(now())

  buyer      User              @relation("BuyerOrders", fields: [buyerId], references: [id])
  payment    Payment           @relation(fields: [paymentId], references: [id])
  items      ProductOrderItem[]
}

model ProductOrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  priceEach  Decimal  @db.Decimal(12, 2)

  order      ProductOrder @relation(fields: [orderId], references: [id])
  product    Product      @relation(fields: [productId], references: [id])
}

// ================= COURSE ENROLLMENTS =================
model CourseEnrollment {
  id                  Int         @id @default(autoincrement())
  courseId            Int
  studentId           Int
  paymentId           Int
  pricePaid           Decimal     @db.Decimal(12, 2)
  progress            Int         @default(0)
  certificateAwarded  Boolean     @default(false)
  enrolledAt          DateTime    @default(now())

  course              Course      @relation(fields: [courseId], references: [id])
  student             User        @relation(fields: [studentId], references: [id])
  payment             Payment     @relation(fields: [paymentId], references: [id])
  certificate         Certificate?
}

// ================= CERTIFICATES =================
model Certificate {
  id                         Int      @id @default(autoincrement())
  enrollmentId               Int @unique
  finalLessonsCompleted      Boolean  @default(false)
  finalAssignmentsCompleted  Boolean  @default(false)
  eligible                   Boolean  @default(false)
  issuedAt                   DateTime?
  certificateUrl             String?

  enrollment                 CourseEnrollment @relation(fields: [enrollmentId], references: [id])
}
