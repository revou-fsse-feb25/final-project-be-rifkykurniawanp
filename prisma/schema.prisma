// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================= ENUMS =================
enum RoleName {
  ADMIN
  SUPPLIER
  INSTRUCTOR
  USER
}

enum PermissionName {
  VIEW_DASHBOARD
  MANAGE_ORDERS
  MANAGE_PRODUCTS
  MANAGE_COURSES
  MANAGE_USERS
}

// ================= USERS & ROLES =================
model Role {
  id          Int      @id @default(autoincrement())
  name        RoleName @unique
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  users           User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int            @id @default(autoincrement())
  name        PermissionName @unique
  description String?        @db.Text

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  address   String?  @db.VarChar(100)
  firstName String?  @map("first_name") @db.VarChar(50)
  lastName  String?  @map("last_name") @db.VarChar(50)
  phone     String?  @db.VarChar(20)
  roleId    Int      @map("role_id")
  isBuyer   Boolean  @default(false) @map("is_buyer")
  isStudent Boolean  @default(false) @map("is_student")
  createdAt DateTime @default(now()) @map("created_at")

  role Role @relation(fields: [roleId], references: [id])

  // Product relations
  suppliedProducts Product[]
  productReviews   ProductReview[]
  productOrders    ProductOrder[]

  // Course relations
  instructedCourses     Course[] @relation("UserInstructedCourses")
  courseEnrollments     CourseEnrollment[]
  lessonProgress        LessonProgress[]
  quizAttempts          QuizAttempt[]
  assignmentSubmissions AssignmentSubmission[]

  payments Payment[]

  @@map("users")
}

// ================= PRODUCT CATEGORIES =================
model ProductCategory {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  slug      String   @unique @db.VarChar(50)
  parentId  Int?     @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")

  parent   ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ProductCategory[] @relation("CategoryHierarchy")
  products Product[]

  @@map("product_categories")
}

// ================= PRODUCTS & ORDERS =================
model Product {
  id             Int      @id @default(autoincrement())
  slug           String   @unique @db.VarChar(100)
  name           String?  @db.VarChar(100)
  description    String?  @db.Text
  price          Decimal? @db.Decimal(12, 2)
  stock          Int?
  image          String?  @db.VarChar(255)
  categoryId     Int?     @map("category_id")
  supplierId     Int      @map("supplier_id")
  rating         Decimal? @default(0) @db.Decimal(2, 1)
  reviewCount    Int?     @default(0) @map("review_count")
  origin         String?  @db.VarChar(50)
  weight         String?  @db.VarChar(20)
  roastLevel     String?  @map("roast_level") @db.VarChar(20)
  caffeine       String?  @db.VarChar(20)
  brewingMethods Json?    @map("brewing_methods")
  createdAt      DateTime @default(now()) @map("created_at")

  category ProductCategory? @relation(fields: [categoryId], references: [id])
  supplier User             @relation(fields: [supplierId], references: [id])

  productTags    ProductTag[]
  productReviews ProductReview[]
  orderItems     ProductOrderItem[]

  @@map("products")
}

model ProductTag {
  id        Int    @id @default(autoincrement())
  productId Int    @map("product_id")
  tag       String @db.VarChar(50)

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, tag])
  @@map("product_tags")
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  userId    Int      @map("user_id")
  rating    Int // 1-5
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("product_reviews")
}

model ProductOrder {
  id         Int      @id @default(autoincrement())
  buyerId    Int      @map("buyer_id")
  totalPrice Decimal? @map("total_price") @db.Decimal(12, 2)
  status     String?  @db.VarChar(20) // pending, shipped, completed, canceled
  createdAt  DateTime @default(now()) @map("created_at")

  buyer      User               @relation(fields: [buyerId], references: [id])
  orderItems ProductOrderItem[]

  @@map("product_orders")
}

model ProductOrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int?
  priceEach Decimal? @map("price_each") @db.Decimal(12, 2)

  order   ProductOrder @relation(fields: [orderId], references: [id])
  product Product      @relation(fields: [productId], references: [id])

  @@map("product_order_items")
}

// ================= COURSE CATEGORIES =================
model CourseCategory {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  slug      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  courses Course[]

  @@map("course_categories")
}

// ================= COURSES =================
model Course {
  id               Int       @id @default(autoincrement())
  title            String?   @db.VarChar(100)
  slug             String?   @unique @db.VarChar(100)
  description      String?   @db.Text
  price            Decimal?  @db.Decimal(12, 2)
  originalPrice    Decimal?  @map("original_price") @db.Decimal(12, 2)
  instructorId     Int?      @map("instructor_id")
  instructorBio    String?   @map("instructor_bio") @db.Text
  instructorAvatar String?   @map("instructor_avatar") @db.VarChar(255)
  rating           Decimal?  @db.Decimal(2, 1)
  students         Int?
  duration         String?   @db.VarChar(20)
  level            String?   @db.VarChar(50)
  icon             String?   @db.VarChar(10)
  color            String?   @db.VarChar(30)
  categoryId       Int?      @map("category_id")
  language         String?   @db.VarChar(50)
  lastUpdated      DateTime? @map("last_updated")
  certificate      Boolean?  @default(false)
  createdAt        DateTime  @default(now()) @map("created_at")

  instructor User?           @relation("UserInstructedCourses", fields: [instructorId], references: [id])
  category   CourseCategory? @relation(fields: [categoryId], references: [id])

  enrollments        CourseEnrollment[]
  courseTags         CourseTag[]
  courseRequirements CourseRequirement[]
  learningOutcomes   CourseLearningOutcome[]
  courseModules      CourseModule[]

  @@map("courses")
}

model CourseEnrollment {
  id                 Int      @id @default(autoincrement())
  courseId           Int      @map("course_id")
  studentId          Int      @map("student_id")
  enrolledAt         DateTime @default(now()) @map("enrolled_at")
  progress           Int?     @default(0) // percent 0-100
  certificateAwarded Boolean? @default(false) @map("certificate_awarded")

  course  Course @relation(fields: [courseId], references: [id])
  student User   @relation(fields: [studentId], references: [id])

  certificates Certificate[]

  @@unique([courseId, studentId])
  @@map("course_enrollments")
}

// ================= COURSE DETAILS =================
model CourseTag {
  id       Int    @id @default(autoincrement())
  courseId Int    @map("course_id")
  tag      String @db.VarChar(50)

  course Course @relation(fields: [courseId], references: [id])

  @@unique([courseId, tag])
  @@map("course_tags")
}

model CourseRequirement {
  id       Int     @id @default(autoincrement())
  courseId Int     @map("course_id")
  content  String? @db.Text

  course Course @relation(fields: [courseId], references: [id])

  @@map("course_requirements")
}

model CourseLearningOutcome {
  id       Int     @id @default(autoincrement())
  courseId Int     @map("course_id")
  content  String? @db.Text

  course Course @relation(fields: [courseId], references: [id])

  @@map("course_learning_outcomes")
}

// ================= COURSE MODULES & LESSONS =================
model CourseModule {
  id          Int     @id @default(autoincrement())
  courseId    Int     @map("course_id")
  title       String? @db.VarChar(100)
  orderNumber Int?    @map("order_number")

  course  Course   @relation(fields: [courseId], references: [id])
  lessons Lesson[]

  @@map("course_modules")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  moduleId    Int      @map("module_id")
  slug        String?  @unique @db.VarChar(100)
  title       String?  @db.VarChar(100)
  description String?  @db.Text
  duration    String?  @db.VarChar(20)
  type        String?  @db.VarChar(20) // video, article, quiz, assignment
  videoUrl    String?  @map("video_url") @db.VarChar(255)
  content     String?  @db.Text
  orderNumber Int?     @map("order_number")
  createdAt   DateTime @default(now()) @map("created_at")

  module CourseModule @relation(fields: [moduleId], references: [id])

  lessonProgress LessonProgress[]
  quiz           Quiz?
  assignments    Assignment[]

  @@map("lessons")
}

// ================= LESSON PROGRESS =================
model LessonProgress {
  id         Int      @id @default(autoincrement())
  lessonId   Int      @map("lesson_id")
  userId     Int      @map("user_id")
  completed  Boolean? @default(false)
  bookmarked Boolean? @default(false)
  updatedAt  DateTime @default(now()) @map("updated_at")

  lesson Lesson @relation(fields: [lessonId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  certificates Certificate[]

  @@unique([lessonId, userId])
  @@map("lesson_progress")
}

// ================= QUIZZES =================
model Quiz {
  id           Int      @id @default(autoincrement())
  lessonId     Int      @unique @map("lesson_id")
  title        String?  @db.VarChar(100)
  passingScore Decimal? @default(70) @map("passing_score") @db.Decimal(5, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  lesson        Lesson         @relation(fields: [lessonId], references: [id])
  quizQuestions QuizQuestion[]
  quizAttempts  QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id       Int     @id @default(autoincrement())
  quizId   Int     @map("quiz_id")
  question String? @db.Text
  type     String? @db.VarChar(20)

  quiz        Quiz         @relation(fields: [quizId], references: [id])
  quizChoices QuizChoice[]

  @@map("quiz_questions")
}

model QuizChoice {
  id        Int      @id @default(autoincrement())
  questionId Int     @map("question_id")
  text      String?  @db.VarChar(255)
  isCorrect Boolean?

  question QuizQuestion @relation(fields: [questionId], references: [id])

  @@map("quiz_choices")
}

model QuizAttempt {
  id          Int      @id @default(autoincrement())
  quizId      Int      @map("quiz_id")
  userId      Int      @map("user_id")
  score       Decimal? @db.Decimal(5, 2)
  attemptedAt DateTime @default(now()) @map("attempted_at")

  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("quiz_attempts")
}

// ================= ASSIGNMENTS =================
model Assignment {
  id           Int       @id @default(autoincrement())
  lessonId     Int       @map("lesson_id")
  title        String?   @db.VarChar(100)
  instructions String?   @db.Text
  dueDate      DateTime? @map("due_date")
  createdAt    DateTime  @default(now()) @map("created_at")

  lesson                Lesson                 @relation(fields: [lessonId], references: [id])
  assignmentSubmissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           Int       @id @default(autoincrement())
  assignmentId Int       @map("assignment_id")
  userId       Int       @map("user_id")
  submittedAt  DateTime? @map("submitted_at")
  content      String?   @db.Text
  grade        Decimal?  @db.Decimal(5, 2)
  feedback     String?   @db.Text

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  certificates Certificate[]

  @@map("assignment_submissions")
}

// ================= CERTIFICATES =================
model Certificate {
  id                              Int       @id @default(autoincrement())
  enrollmentId                    Int       @map("enrollment_id")
  finalLessonProgressId           Int?      @map("final_lesson_progress_id")
  finalAssignmentSubmissionId     Int?      @map("final_assignment_submission_id")
  issuedAt                        DateTime? @map("issued_at")
  certificateUrl                  String?   @map("certificate_url") @db.VarChar(255)

  enrollment                    CourseEnrollment      @relation(fields: [enrollmentId], references: [id])
  finalLessonProgress           LessonProgress?       @relation(fields: [finalLessonProgressId], references: [id])
  finalAssignmentSubmission     AssignmentSubmission? @relation(fields: [finalAssignmentSubmissionId], references: [id])

  @@map("certificates")
}

// ================= PAYMENTS =================
model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  paymentDate   DateTime @default(now()) @map("payment_date")
  amount        Decimal  @db.Decimal(12, 2)
  paymentMethod String?  @map("payment_method") @db.VarChar(50)
  status        String?  @db.VarChar(20)
  payableType   String   @map("payable_type") @db.VarChar(50)
  payableId     Int      @map("payable_id")
  note          String?  @db.Text

  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}