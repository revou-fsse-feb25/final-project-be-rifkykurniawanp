// ================= GENERATOR & DATASOURCE =================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================= ENUMS =================
enum RoleName {
  ADMIN
  SUPPLIER
  INSTRUCTOR
  USER
}

enum ProductCategory {
  COFFEE
  TEA
  HERBAL
  EQUIPMENT
}

enum ProductOrigin {
  INDONESIA
  VIETNAM
  BRAZIL
  ETHIOPIA
  OTHER
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DRAFT
}

enum ProductTagName {
  ARABICA
  ROBUSTA
  GREEN_TEA
  HERBAL
  EQUIPMENT
}

enum CourseCategory {
  COFFEE_BREWING
  TEA_TASTING
  HERBAL_HEALTH
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CartItemType {
  PRODUCT
  COURSE
}

enum CartStatus {
  ACTIVE
  CHECKOUT
  ABANDONED
}

enum LessonType {
  VIDEO
  ARTICLE
  QUIZ
  ASSIGNMENT
}

enum PayableType {
  PRODUCT
  COURSE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

// ================= MODELS =================
model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  firstName  String?
  lastName   String?
  phone      String?
  address    String?
  role       RoleName
  isBuyer    Boolean   @default(false)
  isStudent  Boolean   @default(false)
  createdAt  DateTime  @default(now())

  products         Product[]
  productReviews   ProductReview[]
  courses          Course[]
  lessonProgresses LessonProgress[]
  carts            Cart[]
  payments         Payment[]
  productOrders    ProductOrder[]
  courseEnrollments CourseEnrollment[]
  assignmentSubmissions AssignmentSubmission[]
}

model Product {
  id          Int             @id @default(autoincrement())
  slug        String          @unique
  name        String
  description String?
  price       Decimal         @db.Decimal(12,2)
  stock       Int             @default(0)
  image       String?
  category    ProductCategory
  status      ProductStatus
  supplierId  Int
  rating      Decimal         @default(0) @db.Decimal(2,1)
  reviewCount Int             @default(0)
  origin      ProductOrigin
  weight      String?
  tags        ProductTagName[]
  createdAt   DateTime        @default(now())

  supplier        User             @relation(fields: [supplierId], references: [id])
  reviews         ProductReview[]
  orderItems      ProductOrderItem[]
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Course {
  id           Int           @id @default(autoincrement())
  title        String
  slug         String        @unique
  description  String?
  syllabus     String?
  price        Decimal       @db.Decimal(12,2)
  instructorId Int
  rating       Decimal       @default(0) @db.Decimal(2,1)
  students     Int           @default(0)
  duration     String?
  level        CourseLevel
  category     CourseCategory
  language     String        @default("id")
  certificate  Boolean       @default(false)
  createdAt    DateTime      @default(now())

  instructor       User                 @relation(fields: [instructorId], references: [id])
  modules          CourseModule[]
  enrollments      CourseEnrollment[]
}

model CourseModule {
  id          Int      @id @default(autoincrement())
  courseId    Int
  title       String
  orderNumber Int

  course      Course   @relation(fields: [courseId], references: [id])
  lessons     Lesson[]
}

model Lesson {
  id           Int       @id @default(autoincrement())
  moduleId     Int
  slug         String?   @unique
  title        String
  description  String?
  duration     String?
  type         LessonType @default(VIDEO)
  videoUrl     String?
  content      String?
  quizQuestions String?
  passingScore Decimal   @default(70) @db.Decimal(5,2)
  orderNumber  Int
  createdAt    DateTime  @default(now())

  module       CourseModule @relation(fields: [moduleId], references: [id])
  progresses   LessonProgress[]
  assignments  Assignment[]
}

model LessonProgress {
  lessonId  Int
  userId    Int
  completed Boolean  @default(false)
  updatedAt DateTime @default(now())

  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  user     User    @relation(fields: [userId], references: [id])

  @@id([lessonId, userId])
}

model Assignment {
  id           Int       @id @default(autoincrement())
  lessonId     Int
  title        String
  instructions String
  dueDate      DateTime?
  createdAt    DateTime  @default(now())

  lesson       Lesson    @relation(fields: [lessonId], references: [id])
  submissions  AssignmentSubmission[]
}

model AssignmentSubmission {
  id           Int       @id @default(autoincrement())
  assignmentId Int
  userId       Int
  content      String?
  grade        Decimal?  @db.Decimal(5,2)
  submittedAt  DateTime  @default(now())

  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  payments  Payment[]
}

model CartItem {
  id        Int          @id @default(autoincrement())
  cartId    Int
  itemType  CartItemType
  itemId    Int
  quantity  Int          @default(1)
  price     Decimal      @db.Decimal(12,2)

  cart      Cart         @relation(fields: [cartId], references: [id])
}

model Payment {
  id             Int          @id @default(autoincrement())
  userId         Int
  cartId         Int
  amount         Decimal      @db.Decimal(12,2)
  paymentMethod  String
  status         PaymentStatus @default(PENDING)
  payableType    PayableType
  payableId      Int
  paidAt         DateTime?
  createdAt      DateTime     @default(now())

  user           User         @relation(fields: [userId], references: [id])
  cart           Cart         @relation(fields: [cartId], references: [id])
  productOrders  ProductOrder[]
  courseEnrollments CourseEnrollment[]
}

model ProductOrder {
  id         Int          @id @default(autoincrement())
  buyerId    Int
  paymentId  Int
  totalPrice Decimal      @db.Decimal(12,2)
  status     OrderStatus  @default(PENDING)
  createdAt  DateTime     @default(now())

  buyer      User         @relation(fields: [buyerId], references: [id])
  payment    Payment      @relation(fields: [paymentId], references: [id])
  items      ProductOrderItem[]
}

model ProductOrderItem {
  id         Int       @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  priceEach  Decimal   @db.Decimal(12,2)

  order      ProductOrder @relation(fields: [orderId], references: [id])
  product    Product      @relation(fields: [productId], references: [id])
}

model CourseEnrollment {
  id                 Int       @id @default(autoincrement())
  courseId           Int
  studentId          Int
  paymentId          Int
  pricePaid          Decimal   @db.Decimal(12,2)
  progress           Int       @default(0)
  certificateAwarded Boolean   @default(false)
  enrolledAt         DateTime  @default(now())

  course             Course    @relation(fields: [courseId], references: [id])
  student            User      @relation(fields: [studentId], references: [id])
  payment            Payment   @relation(fields: [paymentId], references: [id])
  certificate        Certificate?
}

model Certificate {
  id                        Int      @id @default(autoincrement())
  enrollmentId              Int      @unique
  finalLessonsCompleted     Boolean  @default(false)
  finalAssignmentsCompleted Boolean  @default(false)
  eligible                  Boolean  @default(false)
  issuedAt                  DateTime?
  certificateUrl            String?

  enrollment                CourseEnrollment @relation(fields: [enrollmentId], references: [id])
}
