// ================= GENERATOR & DATASOURCE =================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================= ENUMS =================
enum RoleName {
  ADMIN
  SUPPLIER
  INSTRUCTOR
  USER
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DRAFT
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  VIDEO
  ARTICLE
  QUIZ
  ASSIGNMENT
}

enum CartItemType {
  PRODUCT
  COURSE
}

enum PayableType {
  PRODUCT
  COURSE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

// ================= AUTH & RBAC =================
model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  password              String
  firstName             String?
  lastName              String?
  phone                 String?
  address               String?
  isBuyer               Boolean                @default(false)
  isStudent             Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?

  // Relations
  userRoles             UserRole[]
  assignmentSubmissions AssignmentSubmission[]
  carts                 Cart[]
  courses               Course[]               @relation("InstructorCourses")
  courseEnrollments     CourseEnrollment[]
  lessonProgresses      LessonProgress[]
  payments              Payment[]
  products              Product[]              @relation("SupplierProducts")
  productOrders         ProductOrder[]         @relation("BuyerOrders")
  productReviews        ProductReview[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        RoleName         @unique
  description String?
  createdAt   DateTime         @default(now())

  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())

  rolePermissions RolePermission[]
}

model UserRole {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// ================= PRODUCT SYSTEM =================
model Product {
  id          Int                @id @default(autoincrement())
  slug        String             @unique
  name        String
  description String?
  price       Decimal            @db.Decimal(12, 2)
  stock       Int                @default(0)
  image       String?
  status      ProductStatus
  supplierId  Int
  rating      Decimal            @default(0) @db.Decimal(2, 1)
  reviewCount Int                @default(0)
  origin      String?
  weight      String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?

  supplier    User               @relation("SupplierProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  category    ProductCategory?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  tags        ProductTag[]
  cartItems   CartItem[]
  orderItems  ProductOrderItem[]
  reviews     ProductReview[]

  @@index([slug])
}

model ProductCategory {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  parentId  Int?
  createdAt DateTime   @default(now())

  parent    ProductCategory?  @relation("ProductCategoryHierarchy", fields: [parentId], references: [id])
  children  ProductCategory[]  @relation("ProductCategoryHierarchy")

  products  Product[]
}

model ProductTag {
  id        Int      @id @default(autoincrement())
  productId Int
  tag       String
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, tag])
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

// ================= COURSE & LEARNING =================
model Course {
  id           Int                        @id @default(autoincrement())
  title        String
  slug         String                     @unique
  description  String?
  syllabus     String?
  price        Decimal                    @db.Decimal(12, 2)
  instructorId Int
  rating       Decimal                    @default(0) @db.Decimal(2, 1)
  students     Int                        @default(0)
  duration     String?
  level        CourseLevel
  language     String                     @default("id")
  certificate  Boolean                    @default(false)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  deletedAt    DateTime?

  instructor   User                       @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  category     CourseCategory?            @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  cartItems    CartItem[]
  enrollments  CourseEnrollment[]
  modules      CourseModule[]
  requirements CourseRequirement[]
  outcomes     CourseLearningOutcome[]
  tags         CourseTag[]

  @@index([slug])
}

model CourseCategory {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())

  courses   Course[]
}

model CourseRequirement {
  id        Int    @id @default(autoincrement())
  courseId  Int
  content   String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseLearningOutcome {
  id        Int    @id @default(autoincrement())
  courseId  Int
  content   String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseTag {
  id        Int    @id @default(autoincrement())
  courseId  Int
  tag       String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, tag])
}

model CourseModule {
  id          Int       @id @default(autoincrement())
  courseId    Int
  title       String
  orderNumber Int
  deletedAt   DateTime?

  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
}

model Lesson {
  id            Int              @id @default(autoincrement())
  moduleId      Int
  slug          String?          @unique
  title         String
  description   String?
  duration      String?
  type          LessonType       @default(VIDEO)
  videoUrl      String?
  content       String?
  orderNumber   Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?

  module        CourseModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progresses    LessonProgress[]
  assignments   Assignment[]
  quiz          Quiz?
}

model LessonProgress {
  lessonId  Int
  userId    Int
  completed Boolean  @default(false)
  updatedAt DateTime @default(now()) @updatedAt

  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([lessonId, userId])
}

// ================= ASSESSMENTS / QUIZ =================
model Assignment {
  id           Int                    @id @default(autoincrement())
  lessonId     Int
  title        String
  instructions String
  dueDate      DateTime?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  deletedAt    DateTime?

  lesson       Lesson                 @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions  AssignmentSubmission[]
}

model AssignmentSubmission {
  id           Int        @id @default(autoincrement())
  assignmentId Int
  userId       Int
  content      String?
  grade        Decimal?   @db.Decimal(5, 2)
  submittedAt  DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        Int           @id @default(autoincrement())
  lessonId  Int           @unique
  createdAt DateTime      @default(now())

  lesson    Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]
}

model QuizQuestion {
  id       Int        @id @default(autoincrement())
  quizId   Int
  content  String
  orderNum Int
  quiz     Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  choices  QuizChoice[]
}

model QuizChoice {
  id         Int          @id @default(autoincrement())
  questionId Int
  content    String
  isCorrect  Boolean
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          Int      @id @default(autoincrement())
  quizId      Int
  userId      Int
  score       Decimal? @db.Decimal(5, 2)
  completedAt DateTime?
  createdAt   DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ================= CART & CHECKOUT =================
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  payments  Payment[]
}

model CartItem {
  id        Int          @id @default(autoincrement())
  cartId    Int
  itemType  CartItemType
  productId Int?
  courseId  Int?
  quantity  Int          @default(1)
  price     Decimal      @db.Decimal(12, 2)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?

  cart      Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  course    Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  /// NOTE:
  /// We DO NOT include @@check here because Prisma schema does not support it.
  /// Enforce the invariant (productId XOR courseId) and (quantity == 1 for COURSE)
  /// in application logic (service layer). Optionally, add a DB-level CHECK via raw SQL migration (see notes below).
}

// ================= PAYMENT & ORDERS =================
model Payment {
  id                Int                @id @default(autoincrement())
  userId            Int
  cartId            Int?
  amount            Decimal            @db.Decimal(12, 2)
  paymentMethod     String
  status            PaymentStatus      @default(PENDING)
  payableType       PayableType
  payableId         Int?
  paidAt            DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart              Cart?              @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productOrders     ProductOrder[]
  courseEnrollments CourseEnrollment[]
}

model ProductOrder {
  id         Int                @id @default(autoincrement())
  buyerId    Int
  paymentId  Int
  totalPrice Decimal            @db.Decimal(12, 2)
  status     OrderStatus        @default(PENDING)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  buyer      User               @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  payment    Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  items      ProductOrderItem[]
}

model ProductOrderItem {
  id        Int          @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  priceEach Decimal      @db.Decimal(12, 2)

  order     ProductOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// ================= COURSE ENROLLMENT & CERTIFICATE =================
model CourseEnrollment {
  id                 Int          @id @default(autoincrement())
  courseId           Int
  studentId          Int
  paymentId          Int
  pricePaid          Decimal      @db.Decimal(12, 2)
  progress           Int          @default(0)
  certificateAwarded Boolean      @default(false)
  enrolledAt         DateTime     @default(now())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  course             Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment            Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  student            User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  certificate        Certificate?

  @@unique([courseId, studentId])
}

model Certificate {
  id                        Int              @id @default(autoincrement())
  enrollmentId              Int              @unique
  finalLessonsCompleted     Boolean          @default(false)
  finalAssignmentsCompleted Boolean          @default(false)
  eligible                  Boolean          @default(false)
  issuedAt                  DateTime?
  certificateUrl            String?

  enrollment                CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}
